pipeline{

    agent any

 

 

 

    stages {

 

 

        stage('Getting project from Git') {

            steps{

                        checkout([$class: 'GitSCM', branches: [[name: 'master']],

                  extensions: [],

                  userRemoteConfigs: [[url: 'https://github.com/DaliDevops/MyProject.git']]])

            }

        }

 

 

       stage('Cleaning the project') {

            steps{

                  sh "mvn -B -DskipTests clean  "

            }

        }

 

 

 

        stage('Artifact Construction') {

            steps{

                  sh "mvn -B -DskipTests package "

            }

        }

 

 

 

         stage('Unit Tests') {

            steps{

                         sh "mvn test "

            }

        }

 

 

 

        stage('Code Quality Check via SonarQube') {

            steps{

 

                        sh "  mvn admin:sonar -Dsonar.projectKey=MyProject -Dsonar.host.url=http://192.168.1.55:9000"

 

            }

        }

 

 

        /*stage('Publish to Nexus') {

            steps {

 

 

  sh 'mvn clean package deploy:deploy-file -DgroupId=com.esprit.examen -DartifactId=tpAchatProject -Dversion=1.2 -DgeneratePom=true -Dpackaging=jar -DrepositoryId=deploymentRepo -Durl=http://192.168.1.55:8081/repository/maven-releases/ -Dfile=target/tpAchatProject-1.2.jar'

 

 

            }

        }*/

 

/*stage('Build Docker Image') {

                      steps {

                          script {

                            sh 'docker build -t azizbenhaha/spring-app:latest .'

                          }

                      }

                  }

 

                  stage('login dockerhub') {

                                        steps {

                                     // sh 'echo dckr_pat_-SnwrdC_ELsL6it2JT6cgIcAlrs | docker login -u azizbenhaha --password-stdin'

                        sh 'docker login -u azizbenhaha --password dckr_pat_-SnwrdC_ELsL6it2JT6cgIcAlrs'

                                            }

              }

         

                            stage('Push Docker Image') {

                                        steps {

                                   sh 'docker push azizbenhaha/spring-app:latest'

                                            }

              }*/

 

 

               stage('Run Spring && MySQL Containers') {

                                steps {

                                    script {

                                      sh 'docker-compose up -d'

                                    }

                                }

                            }

 

         

 

 

 

    

}

 

         

        post {

            success{

            mail bcc: '', body: '''Dear Dali,

we are happy to inform you that your pipeline build was successful.

Great work !

-Jenkins Team-''', cc: '', from: 'dali2008fr@hotmail.fr', replyTo: '', subject: 'Build Finished - Success', to: 'dali2008fr@hotmail.fr'

            }

            

            failure{

mail bcc: '', body: '''Dear Dali,

we are sorry to inform you that your pipeline build failed.

Keep working !

-Jenkins Team-''', cc: '', from: 'dali2008fr@hotmail.fr', replyTo: '', subject: 'Build Finished - Failure', to: 'dali2008fr@hotmail.fr'

            }

 

       always {

            //emailext attachLog: true, body: '', subject: 'Build finished',from: 'dali2008fr@hotmail.fr' , to: 'dali2008fr@hotmail.fr'

            cleanWs()

       }

    }

 

  

      

}
